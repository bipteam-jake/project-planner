generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Project {
  id               String   @id
  name             String
  description      String
  status           String
  projectStatus    String  @default("Active")
  overheadPerHour  Float
  targetMarginPct  Float
  startMonthISO    String
  updatedAt        DateTime @updatedAt

  // Relations
  months  Month[]
  members ProjectMember[]
  weeks   ProjectWeek[]
}

model RosterPerson {
  id               String  @id
  name             String
  personType       String
  department       String
  compMode         String?
  monthlySalary    Int?
  annualSalary     Int?
  hourlyRate       Float?
  baseMonthlyHours Int
  isActive         Boolean @default(true)
  inactiveDate     String?

  // Relations
  memberOf  ProjectMember[]
  allocations Allocation[]
  todoAssignees TodoAssignee[]
}

model ProjectMember {
  projectId String
  personId  String

  project Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  person  RosterPerson @relation(fields: [personId], references: [id])

  @@id([projectId, personId])
  @@index([personId])
}

model Month {
  id        String @id
  projectId String
  index     Int
  label     String
  expenses  Int
  revenue   Int

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  allocations Allocation[]

  @@unique([projectId, index])
  @@index([projectId])
}

model Allocation {
  id           String @id
  monthId      String
  personId     String
  allocationPct Int

  month  Month        @relation(fields: [monthId], references: [id], onDelete: Cascade)
  person RosterPerson @relation(fields: [personId], references: [id])

  @@unique([monthId, personId])
  @@index([monthId])
  @@index([personId])
}

// ---- ToDo board (DB-backed) ----
model ProjectWeek {
  id        String   @id
  projectId String
  weekKey   String   // YYYY-MM-DD (Monday)
  bdNeeded  Boolean  @default(false)
  bdNotes   String   @default("")

  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  todos     Todo[]

  @@unique([projectId, weekKey])
  @@index([weekKey])
}

model Todo {
  id            String  @id
  projectWeekId String
  text          String
  dueDate       String?
  done          Boolean @default(false)

  projectWeek ProjectWeek @relation(fields: [projectWeekId], references: [id], onDelete: Cascade)
  assignees   TodoAssignee[]
}

model TodoAssignee {
  id       String @id
  todoId   String
  personId String

  todo   Todo         @relation(fields: [todoId], references: [id], onDelete: Cascade)
  person RosterPerson @relation(fields: [personId], references: [id])

  @@unique([todoId, personId])
  @@index([personId])
}

model ProjectWeekOrder {
  id      String @id
  weekKey String @unique
  order   Json   // array of projectIds
}
